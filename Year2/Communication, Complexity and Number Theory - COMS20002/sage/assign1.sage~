#---------Assignment1------------------------------------------
def MyPowMod(a,b,c):
    curr_base=1;
    while b>0:
        if b%2==0:
            a=(a*a)%c
            b=b//2
        else:
            curr_base=(curr_base*a)%c
            b=b-1
    return curr_base%c

def MyGCD(a,b):
    while True:
        temp = b
        b=a%b
        a = temp
        if b==0: return a

def MyLCM(a,b):
    return a*b//MyGCD(a,b)

def MyXGCD(a,b):
    rprev = a; r = b
    sprev = 1; s = 0
    tprev = 0; t = 1
    while True:
        q = rprev // r
        rnext = rprev - q*r #Remainder calculations
        rprev = r
        r = rnext
        snext = sprev - q*s #First Bezout coefficient
        sprev = s
        s = snext
        tnext = tprev - q*t #Second Bezout coefficient
        tprev = t
        t = tnext
        if r==0: return (rprev,sprev,tprev)

def Findx(a,b):
    res = MyXGCD(a,b)
    if res[0]<>1: return str(a) + " is not invertible modulo " + str(b)
    ZP.<x>=Integers(b)[]
    return ZP(res[1])

def MyFactor(a):
    if a==1: return "1 cannot be factorized"
    res = []
    prime = 2
    while a<>1:
        exponent=0
        temp=0
        while temp==0:
            temp=a%prime
            if temp==0:
                exponent=exponent+1
                a=a//prime
        if exponent<>0:
            res=res+[[prime,exponent]]
        prime=next_prime(prime)
    return res
#----------Assignment2------------------------
def addToItself(P, n):
    y = P
    for i in range(n):
        y = y + P
    return y

def perm2cycles(perm):
    n = perm.ncols()
    check = range(1,n+1,1)
    nextUnused = [0]
    def UpdateNext(i):
        next = i
        while True:
            next = next + 1
            if next == n:
                nextUnused[0] = n
                return
            if check[next] != 0:
                nextUnused[0] = next
                return
    def findCycle(start):
        def findCycleHelper(start2,end):
            check[start2] = 0
            item = perm[1][start2]
            #print str(item) +" " + str(end)
            if(item == end):
                return [item]
            return [item] + findCycleHelper(item, end)
        cycle = findCycleHelper(start,start)
        UpdateNext(start)
        return cycle
    cycles = []
    while(True):
        #print str(nextUnused[0])
        cycle = findCycle(nextUnused[0])
        if(len(cycle)>1):
            cycles.append(cycle)
        if nextUnused[0] == n:
            return cycles

def solveaxb(a,b,c):
    ZP = Integers(c)
    b = ZP(b)
    a = ZP(a)
    if b == 1:
        return 0
    res = 1
    acc = a
    while True:
        if acc==b:
            return res
        res = res + 1
        acc = ZP(acc*a)

def solveaxbE(a,b,E):
    b = E(b)
    a = E(a)
    if b == E(0):
        return 0
    res = 1
    acc = a
    while True:
        if acc==b:
            return res
        res = res + 1
        acc = E(acc+a)

#--------------Assignment3-------------------
def MyPhiFun(n):
    phi = 1
    if n == 1:
        return phi
    if n <  1:
        return 0
    factors = MyFactor(n)
    for i in factors:
        phi = phi * (1-1/factors[0])
    phi = phi * n
    return phi

#--------Extras-------------------

def sumOfPhiUpto(a):
    sum=0
    for i in range(1,a+1):
        sum=sum+MyPhi(i)
    return sum
